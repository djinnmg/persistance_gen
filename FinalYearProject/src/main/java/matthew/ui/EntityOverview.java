package matthew.ui;

import matthew.jaxb.types.EntitiesType;
import matthew.jaxb.types.EntityType;
import matthew.jaxb.types.PropertyType;
import org.apache.commons.lang.StringUtils;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;


public class EntityOverview {
    private JPanel entityViewPanel;
    private JTable propertyTable;
    private JButton deleteButton;
	private JButton addNewPropertyButton;
    private JTextField entityNameField;
    private JButton updateNameButton;
	private JButton viewEntitiesButton;

	private final JFrame frame;
	private final EntitiesType entities;
	private final EntityType entity;

	public EntityOverview(final JFrame frame, final EntitiesType entities, final EntityType entity)
	{
		this.frame = frame;
		this.entities = entities;
		this.entity = entity;


		updateNameButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e)
			{
				super.mouseClicked(e);

				final String updatedEntityName = entityNameField.getText().replace(" ", "");

				if (!StringUtils.isAlphanumeric(updatedEntityName))
				{    // TODO show popup on panel
					System.out.println("Warning entity name is not fully alphanumeric!");
				}

				entity.setName(updatedEntityName);

			}
		});
		viewEntitiesButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e)
			{
				super.mouseClicked(e);

				new ProjectOverview(frame, entities).loadPanel();
			}
		});
		deleteButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e)
			{
				super.mouseClicked(e);
				// TODO
			}
		});

		addNewPropertyButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e)
			{
				super.mouseClicked(e);

				new PropertyOverview(frame, entities, entity).LoadPanel();
			}
		});
	}


	public void LoadPanel()
	{
		frame.setContentPane(entityViewPanel);
		frame.revalidate();

		entityNameField.setText(entity.getName());

		loadPropertyTable();
	}

	private void loadPropertyTable()
	{
		String[] columnHeaders = {"Name", "Type", "Id", "Serialise", "Nullable", "Text Area", "Incoming", "Mapping"};
		DataModel tableModel = new DataModel(columnHeaders, entity.getProperty().size());
		propertyTable.setModel(tableModel);

		int tableRow = 0;

		for (PropertyType property : entity.getProperty())
		{
			if (tableRow >= entity.getProperty().size())
				throw new RuntimeException("Trying to display row " + tableRow + 1 + " in property table for entity "
				                           + entity.getName() + " but entity only has " + entity.getProperty().size() + " rows!");

			propertyTable.setValueAt(property.getName(),tableRow,0);
			propertyTable.setValueAt(property.getType(),tableRow,1);
			propertyTable.setValueAt(new Boolean(property.isId()),tableRow,2);
			propertyTable.setValueAt(new Boolean(property.isSerialise()),tableRow,3);
			propertyTable.setValueAt(new Boolean(property.isNullable()),tableRow,4);
			propertyTable.setValueAt(new Boolean(property.isTextArea()),tableRow,5);
			propertyTable.setValueAt(property.getIncoming(),tableRow,6);
			propertyTable.setValueAt(property.getMapping(),tableRow,7);

			tableRow++;
		}



	}

	private class DataModel extends DefaultTableModel {

		public DataModel(Object[] columnNames, int rowCount) {
			super(columnNames, rowCount);
		}

		@Override
		public Class<?> getColumnClass(int columnIndex) {
			if (columnIndex > 1 && columnIndex < 6) {
				return Boolean.class;
			}
			return super.getColumnClass(columnIndex);
		}
	}



	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        entityViewPanel = new JPanel();
        entityViewPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 5, new Insets(5, 5, 5, 5), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Properties");
        entityViewPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        entityViewPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        entityViewPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        entityViewPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        propertyTable = new JTable();
        scrollPane1.setViewportView(propertyTable);
        deleteButton = new JButton();
        deleteButton.setText("Delete");
        deleteButton.setMnemonic('D');
        deleteButton.setDisplayedMnemonicIndex(0);
        entityViewPanel.add(deleteButton, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addNewPropertyButton = new JButton();
        addNewPropertyButton.setText("Add New Property");
        addNewPropertyButton.setMnemonic('A');
        addNewPropertyButton.setDisplayedMnemonicIndex(0);
        entityViewPanel.add(addNewPropertyButton, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        entityViewPanel.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(40, -1), null, 0, false));
        entityNameField = new JTextField();
        entityViewPanel.add(entityNameField, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        updateNameButton = new JButton();
        updateNameButton.setText("Update Name");
        entityViewPanel.add(updateNameButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Entity Overview");
        entityViewPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return entityViewPanel;
    }


}
